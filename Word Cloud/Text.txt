Built-in Types
The following sections describe the standard types that are built into the interpreter.
The principal built-in types are numerics, sequences, mappings, classes, instances and
exceptions.
Some collection classes are mutable. The methods that add, subtract, or rearrange their
members in place, and don’t return a specific item, never return the collection instance itself
but None.
Some operations are supported by several object types; in particular, practically all objects
can be compared for equality, tested for truth value, and converted to a string (with the
repr() function or the slightly different str() function). The latter function is implicitly used
when an object is written by the print() function.
Truth Value Testing
Any object can be tested for truth value, for use in an if or while condition or as operand of
the Boolean operations below.
By default, an object is considered true unless its class defines either a __bool__() method
that returns False or a __len__() method that returns zero, when called with the object. [1]
Here are most of the built-in objects considered false:
constants defined to be false: None and False.
zero of any numeric type: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)
empty sequences and collections: '', (), [], {}, set(), range(0)
Operations and built-in functions that have a Boolean result always return 0 or False for false
and 1 or True for true, unless otherwise stated. (Important exception: the Boolean operations
or and and always return one of their operands.)
Boolean Operations — and, or, not
These are the Boolean operations, ordered by ascending priority:
Operation Result Notes
x or y if x is false, then y, else x (1)
x and y if x is false, then x, else y (2)
not x if x is false, then True, else False (3)
Notes:
1. This is a short-circuit operator, so it only evaluates the second argument if the first one
is false.
9/12/2020 Built-in Types — Python 3.8.6rc1 documentation
https://docs.python.org/3/library/stdtypes.html#string-methods 2/71
2. This is a short-circuit operator, so it only evaluates the second argument if the first one
is true.
3. not has a lower priority than non-Boolean operators, so not a == b is interpreted as
not (a == b), and a == not b is a syntax error.
Comparisons
There are eight comparison operations in Python. They all have the same priority (which is
higher than that of the Boolean operations). Comparisons can be chained arbitrarily; for
example, x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only
once (but in both cases z is not evaluated at all when x < y is found to be false).
This table summarizes the comparison operations:
Operation Meaning
< strictly less than
<= less than or equal
> strictly greater than
>= greater than or equal
== equal
!= not equal
is object identity
is not negated object identity
Objects of different types, except different numeric types, never compare equal. The ==
operator is always defined but for some object types (for example, class objects) is equivalent
to is. The <, <=, > and >= operators are only defined where they make sense; for example,
they raise a TypeError exception when one of the arguments is a complex number.
Non-identical instances of a class normally compare as non-equal unless the class defines
the __eq__() method.
Instances of a class cannot be ordered with respect to other instances of the same class, or
other types of object, unless the class defines enough of the methods __lt__(), __le__(),
__gt__(), and __ge__() (in general, __lt__() and __eq__() are sufficient, if you want the
conventional meanings of the comparison operators).
The behavior of the is and is not operators cannot be customized; also they can be applied
to any two objects and never raise an exception.
Two more operations with the same syntactic priority, in and not in, are supported by types
that are iterable or implement the __contains__() method.
Numeric Types — int, float, complex
9/12/2020 Built-in Types — Python 3.8.6rc1 documentation
https://docs.python.org/3/library/stdtypes.html#string-methods 3/71
There are three distinct numeric types: integers, floating point numbers, and complex
numbers. In addition, Booleans are a subtype of integers. Integers have unlimited precision.
Floating point numbers are usually implemented using double in C; information about the
precision and internal representation of floating point numbers for the machine on which your
program is running is available in sys.float_info. Complex numbers have a real and
imaginary part, which are each a floating point number. To extract these parts from a complex
number z, use z.real and z.imag. (The standard library includes the additional numeric
types fractions.Fraction, for rationals, and decimal.Decimal, for floating-point numbers
with user-definable precision.)
Numbers are created by numeric literals or as the result of built-in functions and operators.
Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric
literals containing a decimal point or an exponent sign yield floating point numbers. Appending
'j' or 'J' to a numeric literal yields an imaginary number (a complex number with a zero
real part) which you can add to an integer or float to get a complex number with real and
imaginary parts